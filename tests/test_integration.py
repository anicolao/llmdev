"""
Integration tests for llmdev using mock data.
"""

import pytest
from pathlib import Path
from datetime import datetime
from llmdev.detector import CopilotDetector, Detection
from llmdev.reporter import ReportGenerator
from llmdev.config import Config


class TestIntegration:
    """Integration tests."""

    def test_end_to_end_with_mock_data(self, tmp_path):
        """Test the full pipeline with mock data."""

        # Setup
        config = Config(output_dir=tmp_path, verbose=False)
        detector = CopilotDetector()
        reporter = ReportGenerator(config)

        # Mock commit data
        commits_data = [
            {
                "sha": "abc123",
                "message": "Add feature with GitHub Copilot assistance",
                "author": "developer1",
                "author_email": "dev1@example.com",
                "date": datetime.now(),
                "url": "https://github.com/test/repo/commit/abc123",
            },
            {
                "sha": "def456",
                "message": "Fix bug in authentication",
                "author": "developer2",
                "author_email": "dev2@example.com",
                "date": datetime.now(),
                "url": "https://github.com/test/repo/commit/def456",
            },
        ]

        # Mock PR data
        prs_data = [
            {
                "number": 42,
                "title": "Add new API endpoint",
                "body": "This PR adds a new endpoint using copilot",
                "author": "developer1",
                "state": "open",
                "created_at": datetime.now(),
                "updated_at": datetime.now(),
                "merged": False,
                "url": "https://github.com/test/repo/pull/42",
                "comments": [],
            }
        ]

        # Mock issue data
        issues_data = [
            {
                "number": 10,
                "title": "Bug in copilot-generated code",
                "body": "Found an issue in code generated by GitHub Copilot",
                "author": "user1",
                "state": "open",
                "created_at": datetime.now(),
                "updated_at": datetime.now(),
                "url": "https://github.com/test/repo/issues/10",
                "comments": [],
            }
        ]

        # Run detection
        all_detections = []
        for commit in commits_data:
            all_detections.extend(detector.detect_in_commit(commit))
        for pr in prs_data:
            all_detections.extend(detector.detect_in_pr(pr))
        for issue in issues_data:
            all_detections.extend(detector.detect_in_issue(issue))

        # Verify detections
        assert len(all_detections) > 0
        assert any(d.source_type == "commit" for d in all_detections)
        assert any(d.source_type == "pr" for d in all_detections)
        assert any(d.source_type == "issue" for d in all_detections)

        # Generate summary
        summary = detector.get_summary(all_detections)
        assert summary["total"] > 0

        # Create full results structure
        results = {
            "repository": {
                "owner": "test",
                "name": "repo",
                "full_name": "test/repo",
                "description": "Test repository",
                "stars": 100,
                "forks": 10,
                "created_at": datetime.now(),
                "updated_at": datetime.now(),
            },
            "analysis": {
                "timestamp": datetime.now(),
                "commits_analyzed": len(commits_data),
                "prs_analyzed": len(prs_data),
                "issues_analyzed": len(issues_data),
            },
            "commits": commits_data,
            "prs": prs_data,
            "issues": issues_data,
            "detections": all_detections,
            "summary": summary,
        }

        # Generate report
        report_path = reporter.generate(results)

        # Verify report was created
        assert report_path.exists()
        assert report_path.suffix == ".md"

        # Read report content
        content = report_path.read_text()

        # Verify key sections are present
        assert "# LLM Development Analysis Report" in content
        assert "test/repo" in content
        assert "Repository Overview" in content
        assert "Analysis Scope" in content
        assert "Detection Summary" in content
        assert "Detailed Findings" in content

        # Verify detection counts are shown
        assert str(summary["total"]) in content

        # Verify at least one detection is shown
        assert "copilot" in content.lower() or "Copilot" in content

    def test_no_detections_report(self, tmp_path):
        """Test report generation when no detections are found."""

        config = Config(output_dir=tmp_path)
        detector = CopilotDetector()
        reporter = ReportGenerator(config)

        # Mock data without Copilot mentions
        results = {
            "repository": {
                "owner": "test",
                "name": "clean-repo",
                "full_name": "test/clean-repo",
                "description": "A clean repository",
                "stars": 50,
                "forks": 5,
                "created_at": datetime.now(),
                "updated_at": datetime.now(),
            },
            "analysis": {
                "timestamp": datetime.now(),
                "commits_analyzed": 10,
                "prs_analyzed": 5,
                "issues_analyzed": 3,
            },
            "commits": [],
            "prs": [],
            "issues": [],
            "detections": [],
            "summary": detector.get_summary([]),
        }

        # Generate report
        report_path = reporter.generate(results)

        # Verify report exists
        assert report_path.exists()

        # Read and verify content
        content = report_path.read_text()
        assert "**Total Copilot Detections:** 0" in content
        assert "No Copilot usage detected" in content
